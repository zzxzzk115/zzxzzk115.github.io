<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://zzxzzk115.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://zzxzzk115.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-11T21:05:30+00:00</updated><id>https://zzxzzk115.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">A Little Secret of Tracy Profiler</title><link href="https://zzxzzk115.github.io/featured-posts/2025/a-little-secret-of-tracy-profiler/" rel="alternate" type="text/html" title="A Little Secret of Tracy Profiler"/><published>2025-04-11T01:35:00+00:00</published><updated>2025-04-11T01:35:00+00:00</updated><id>https://zzxzzk115.github.io/featured-posts/2025/a-little-secret-of-tracy-profiler</id><content type="html" xml:base="https://zzxzzk115.github.io/featured-posts/2025/a-little-secret-of-tracy-profiler/"><![CDATA[<p>If you‚Äôre using Tracy Profiler to analyze your program but haven‚Äôt configured it yet, you might notice a steady increase in memory usage, which could eventually lead to an out-of-memory error.</p> <p>This behavior might appear to be a memory leak caused by Tracy, but it‚Äôs not. By default, Tracy stores all frame data captured from your running program until the profiler is connected. This can result in significant memory consumption. Thankfully, you can adjust this behavior by enabling the <code class="language-plaintext highlighter-rouge">TRACY_ON_DEMAND</code> CMake option or the <code class="language-plaintext highlighter-rouge">on-demand</code> feature in vcpkg. When enabled, Tracy will only store frame data after the profiler is connected to your program.</p> <h2 id="configuring-with-cmake">Configuring with CMake</h2> <p>To enable <code class="language-plaintext highlighter-rouge">TRACY_ON_DEMAND</code> in a CMake project, you can use the following configuration:</p> <div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">include</span><span class="p">(</span>FetchContent<span class="p">)</span>
<span class="nf">FetchContent_Declare</span><span class="p">(</span>Tracy
  GIT_REPOSITORY https://github.com/wolfpld/tracy
  GIT_TAG v0.11.1
<span class="p">)</span> 
<span class="nb">set</span><span class="p">(</span>TRACY_ON_DEMAND ON CACHE BOOL <span class="s2">""</span> FORCE<span class="p">)</span> <span class="c1"># Enable on-demand mode</span>
<span class="nf">FetchContent_MakeAvailable</span><span class="p">(</span>Tracy<span class="p">)</span>
</code></pre></div></div> <h2 id="configuring-with-vcpkg">Configuring with VCPKG</h2> <p>To enable the <code class="language-plaintext highlighter-rouge">on-demand</code> feature in vcpkg, update your <code class="language-plaintext highlighter-rouge">vcpkg.json</code> file as shown below:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tracy"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"features"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"on-demand"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"version&gt;="</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.11.1#2"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>While it might seem intuitive for <code class="language-plaintext highlighter-rouge">TRACY_ON_DEMAND</code> to be enabled by default, it is not. Hopefully, this blog post helps you configure Tracy Profiler effectively and avoid unnecessary memory usage.</p>]]></content><author><name></name></author><category term="development"/><category term="tools"/><category term="performance-analysis"/><category term="tracy"/><summary type="html"><![CDATA[Possible Memory Leak of Tracy? Not exactly...]]></summary></entry><entry><title type="html">Giscus enabled!</title><link href="https://zzxzzk115.github.io/featured-posts/2025/giscus-enabled/" rel="alternate" type="text/html" title="Giscus enabled!"/><published>2025-03-14T00:59:00+00:00</published><updated>2025-03-14T00:59:00+00:00</updated><id>https://zzxzzk115.github.io/featured-posts/2025/giscus-enabled</id><content type="html" xml:base="https://zzxzzk115.github.io/featured-posts/2025/giscus-enabled/"><![CDATA[<p>This post shows how to add <a href="https://giscus.app/">Giscus</a> comments.</p> <p>Peace üïäÔ∏è and love ‚ù§Ô∏è</p>]]></content><author><name></name></author><category term="test"/><category term="comments"/><category term="giscus"/><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">Develop OpenXR native PC apps without a headset by using Meta XR Simulator | Lazy_V‚Äôs Blog</title><link href="https://zzxzzk115.github.io/featured-posts/2025/develop-openxr-native-pc-apps-without-a-headset-by-using-meta-xr-simulator-lazy_vs-blog/" rel="alternate" type="text/html" title="Develop OpenXR native PC apps without a headset by using Meta XR Simulator | Lazy_V‚Äôs Blog"/><published>2025-02-11T00:00:00+00:00</published><updated>2025-02-11T00:00:00+00:00</updated><id>https://zzxzzk115.github.io/featured-posts/2025/develop-openxr-native-pc-apps-without-a-headset-by-using-meta-xr-simulator--lazy_vs-blog</id><content type="html" xml:base="https://zzxzzk115.github.io/featured-posts/2025/develop-openxr-native-pc-apps-without-a-headset-by-using-meta-xr-simulator-lazy_vs-blog/"><![CDATA[<p>If you don‚Äôt have an XR headset but you want to develop OpenXR apps, you can use Meta XR Simulator! It‚Äôs great.Download it from hereopen in new windowYou will get a compressed file, and you have to extract it and get the necessary files.We only need the MetaXRSimulator folder. Copy it to somewhere on your machine, for example, C:\MetaXRSimulator.There are two options to configure the currently active OpenXR runtime on Windows:I recommend you to use an temporary environment variable (XR_RUNTIME_JSON) in the IDE or the terminal to set the currently active OpenXR runtime, which will not replace the system default OpenXR runtime.After configuring the environment variable, just run your OpenXR apps in the same terminal!Have fun!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[If you don't have an XR headset but you want to develop OpenXR apps, you can use Meta XR Simulator! It's great.]]></summary></entry></feed>